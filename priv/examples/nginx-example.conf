# This assumes mfpb running on port 4000.
# mfpb.in is running with these params:
# docker run --name mfpb -e SECRET_KEY_BASE=<secret_key_base>
#   -e MFPB_PORT=443 -e MFPB_HOST=mfpb.in -e MFPB_SCHEME=https
#   -e MFPB_USE_BIN_SUBDOMAINS=1 -e MFPB_BIN_MAX_REQUESTS=10000
#   -e MFPB_BIN_INACTIVITY_TIMEOUT=86400000 -p 4000:4000 rbino/mfpb

upstream mfpb {
    server 127.0.0.1:4000 max_fails=5 fail_timeout=60s;
}

server {
    listen [::]:80 ipv6only=on default_server;
    listen 80 default_server;
    server_name mfpb.in www.mfpb.in;

    location / {
        return 301 https://$server_name$request_uri;
    }

    # Don't force https for request URLs, so it's possible to send requests
    # from strange stuff not supporting SSL, not following redirects etc
    location /r {
        proxy_http_version 1.1;

        proxy_set_header Host $http_host;
        proxy_set_header Connection $http_connection;

        proxy_pass http://mfpb;
        proxy_redirect off;
    }
}

server {
    listen [::]:443 ssl ipv6only=on default_server;
    listen 443 ssl default_server;
    server_name mfpb.in www.mfpb.in;

    ssl_certificate /etc/letsencrypt/live/mfpb.in-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mfpb.in-0001/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    location / {
        proxy_http_version 1.1;

        proxy_set_header Host $http_host;
        proxy_set_header Connection $http_connection;

        proxy_pass http://mfpb;
        proxy_redirect off;
    }

    # Handle /live separately so we add the Upgrade header only here
    # leaving our logged requests clean
    location /live {
        proxy_http_version 1.1;

        proxy_set_header Host $http_host;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_pass http://mfpb/live;
        proxy_redirect off;
    }
}

#################################################################################
# Everything below this line is needed only if you need to support bin subdomains
# A wildcard certificate is needed to make this work with SSL

# Don't force https for request subdomains, so it's possible to send requests
# from strange stuff not supporting SSL, not following redirects etc
server {
    listen [::]:80;
    listen 80;
    server_name ~^(?<bin_id>\w+).mfpb.in;

    location / {
        proxy_http_version 1.1;

        proxy_set_header Host $http_host;
        proxy_set_header Connection $http_connection;

        proxy_pass http://mfpb;
        proxy_redirect off;

        rewrite ^/(.*)$ /r/$bin_id$uri break;
    }
}

server {
    listen [::]:443 ssl;
    listen 443 ssl;
    server_name ~^(?<bin_id>\w+).mfpb.in;

    ssl_certificate /etc/letsencrypt/live/mfpb.in-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mfpb.in-0001/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    location / {
        proxy_http_version 1.1;

        proxy_set_header Host $http_host;
        proxy_set_header Connection $http_connection;

        proxy_pass http://mfpb;
        proxy_redirect off;

        rewrite ^/(.*)$ /r/$bin_id$uri break;
    }
}
